"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const si = require("systeminformation");
const __1 = require("..");
const util_1 = require("../util");
class StillCamera {
    constructor(options = {}) {
        this.options = Object.assign({ rotation: __1.Rotation.Rotate0, flip: __1.Flip.None, delay: 1 }, options);
    }
    static async getJpegSignature() {
        const systemInfo = await si.system();
        switch (systemInfo.model) {
            case 'BCM2835 - Pi 3 Model B':
            case 'BCM2835 - Pi 3 Model B+':
            case 'BCM2835 - Pi 4 Model B':
                return Buffer.from([0xff, 0xd8, 0xff, 0xe1]);
            default:
                throw new Error(`Could not determine JPEG signature. Unknown system model '${systemInfo.model}'`);
        }
    }
    async takeImage() {
        try {
            return await util_1.spawnPromise('raspistill', [
                /**
                 * Width
                 */
                ...(this.options.width ? ['--width', this.options.width.toString()] : []),
                /**
                 * Height
                 */
                ...(this.options.height ? ['--height', this.options.height.toString()] : []),
                /**
                 * Rotation
                 */
                ...(this.options.rotation ? ['--rotation', this.options.rotation.toString()] : []),
                /**
                 * Horizontal flip
                 */
                ...(this.options.flip &&
                    (this.options.flip === __1.Flip.Horizontal || this.options.flip === __1.Flip.Both)
                    ? ['--hflip']
                    : []),
                /**
                 * Vertical flip
                 */
                ...(this.options.flip &&
                    (this.options.flip === __1.Flip.Vertical || this.options.flip === __1.Flip.Both)
                    ? ['--vflip']
                    : []),
                /**
                 * Capture delay (ms)
                 */
                '--timeout',
                this.options.delay.toString(),
                /**
                 * Do not display preview overlay on screen
                 */
                '--nopreview',
                /**
                 * Output to stdout
                 */
                '--output',
                '-',
            ]);
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                throw new Error("Could not take image with StillCamera. Are you running on a Raspberry Pi with 'raspistill' installed?");
            }
            throw err;
        }
    }
}
exports.default = StillCamera;
//# sourceMappingURL=still-camera.js.map